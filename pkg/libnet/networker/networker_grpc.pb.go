// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: pkg/libnet/networker/networker.proto

package networker

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NetworkerClient is the client API for Networker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NetworkerClient interface {
	// Link
	ShowNetLink(ctx context.Context, in *NetLinkQuery, opts ...grpc.CallOption) (*NetLinkResponse, error)
	SetNetLinkMac(ctx context.Context, in *NetLinkQuery, opts ...grpc.CallOption) (*NetLinkResponse, error)
	SetNetLinkUp(ctx context.Context, in *NetLinkQuery, opts ...grpc.CallOption) (*NetLinkResponse, error)
	SetNetLinkDown(ctx context.Context, in *NetLinkQuery, opts ...grpc.CallOption) (*NetLinkResponse, error)
	// Bridge
	ShowBridge(ctx context.Context, in *BridgeQuery, opts ...grpc.CallOption) (*NetLinkResponse, error)
	ShowBridgeSlave(ctx context.Context, in *BridgeQuery, opts ...grpc.CallOption) (*NetLinkResponse, error)
	AddBridge(ctx context.Context, in *BridgeQuery, opts ...grpc.CallOption) (*NetLinkResponse, error)
	DelBridge(ctx context.Context, in *BridgeQuery, opts ...grpc.CallOption) (*NetLinkResponse, error)
	SetBridgeMaster(ctx context.Context, in *BridgeQuery, opts ...grpc.CallOption) (*NetLinkResponse, error)
	UnsetBridgeMaster(ctx context.Context, in *BridgeQuery, opts ...grpc.CallOption) (*NetLinkResponse, error)
	// Veth
	ShowVeth(ctx context.Context, in *VethQuery, opts ...grpc.CallOption) (*NetLinkResponse, error)
	AddVeth(ctx context.Context, in *VethQuery, opts ...grpc.CallOption) (*NetLinkResponse, error)
	DelVeth(ctx context.Context, in *VethQuery, opts ...grpc.CallOption) (*NetLinkResponse, error)
	// Vlan
	ShowVlan(ctx context.Context, in *VlanQuery, opts ...grpc.CallOption) (*NetLinkResponse, error)
	AddVlan(ctx context.Context, in *VlanQuery, opts ...grpc.CallOption) (*NetLinkResponse, error)
	DelVlan(ctx context.Context, in *VlanQuery, opts ...grpc.CallOption) (*NetLinkResponse, error)
	// IP ADDR
	ShowAddr(ctx context.Context, in *AddrQuery, opts ...grpc.CallOption) (*AddrResponse, error)
	AddAddr(ctx context.Context, in *AddrQuery, opts ...grpc.CallOption) (*AddrResponse, error)
	DelAddr(ctx context.Context, in *AddrQuery, opts ...grpc.CallOption) (*AddrResponse, error)
	// IP RULE
	ShowRule(ctx context.Context, in *RuleQuery, opts ...grpc.CallOption) (*RuleResponse, error)
	AddRule(ctx context.Context, in *RuleQuery, opts ...grpc.CallOption) (*RuleResponse, error)
	DelRule(ctx context.Context, in *RuleQuery, opts ...grpc.CallOption) (*RuleResponse, error)
	// IP ROUTE
	ShowRoute(ctx context.Context, in *RouteQuery, opts ...grpc.CallOption) (*RouteResponse, error)
	AddRoute(ctx context.Context, in *RouteQuery, opts ...grpc.CallOption) (*RouteResponse, error)
	DelRoute(ctx context.Context, in *RouteQuery, opts ...grpc.CallOption) (*RouteResponse, error)
}

type networkerClient struct {
	cc grpc.ClientConnInterface
}

func NewNetworkerClient(cc grpc.ClientConnInterface) NetworkerClient {
	return &networkerClient{cc}
}

func (c *networkerClient) ShowNetLink(ctx context.Context, in *NetLinkQuery, opts ...grpc.CallOption) (*NetLinkResponse, error) {
	out := new(NetLinkResponse)
	err := c.cc.Invoke(ctx, "/networker.Networker/ShowNetLink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkerClient) SetNetLinkMac(ctx context.Context, in *NetLinkQuery, opts ...grpc.CallOption) (*NetLinkResponse, error) {
	out := new(NetLinkResponse)
	err := c.cc.Invoke(ctx, "/networker.Networker/SetNetLinkMac", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkerClient) SetNetLinkUp(ctx context.Context, in *NetLinkQuery, opts ...grpc.CallOption) (*NetLinkResponse, error) {
	out := new(NetLinkResponse)
	err := c.cc.Invoke(ctx, "/networker.Networker/SetNetLinkUp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkerClient) SetNetLinkDown(ctx context.Context, in *NetLinkQuery, opts ...grpc.CallOption) (*NetLinkResponse, error) {
	out := new(NetLinkResponse)
	err := c.cc.Invoke(ctx, "/networker.Networker/SetNetLinkDown", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkerClient) ShowBridge(ctx context.Context, in *BridgeQuery, opts ...grpc.CallOption) (*NetLinkResponse, error) {
	out := new(NetLinkResponse)
	err := c.cc.Invoke(ctx, "/networker.Networker/ShowBridge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkerClient) ShowBridgeSlave(ctx context.Context, in *BridgeQuery, opts ...grpc.CallOption) (*NetLinkResponse, error) {
	out := new(NetLinkResponse)
	err := c.cc.Invoke(ctx, "/networker.Networker/ShowBridgeSlave", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkerClient) AddBridge(ctx context.Context, in *BridgeQuery, opts ...grpc.CallOption) (*NetLinkResponse, error) {
	out := new(NetLinkResponse)
	err := c.cc.Invoke(ctx, "/networker.Networker/AddBridge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkerClient) DelBridge(ctx context.Context, in *BridgeQuery, opts ...grpc.CallOption) (*NetLinkResponse, error) {
	out := new(NetLinkResponse)
	err := c.cc.Invoke(ctx, "/networker.Networker/DelBridge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkerClient) SetBridgeMaster(ctx context.Context, in *BridgeQuery, opts ...grpc.CallOption) (*NetLinkResponse, error) {
	out := new(NetLinkResponse)
	err := c.cc.Invoke(ctx, "/networker.Networker/SetBridgeMaster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkerClient) UnsetBridgeMaster(ctx context.Context, in *BridgeQuery, opts ...grpc.CallOption) (*NetLinkResponse, error) {
	out := new(NetLinkResponse)
	err := c.cc.Invoke(ctx, "/networker.Networker/UnsetBridgeMaster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkerClient) ShowVeth(ctx context.Context, in *VethQuery, opts ...grpc.CallOption) (*NetLinkResponse, error) {
	out := new(NetLinkResponse)
	err := c.cc.Invoke(ctx, "/networker.Networker/ShowVeth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkerClient) AddVeth(ctx context.Context, in *VethQuery, opts ...grpc.CallOption) (*NetLinkResponse, error) {
	out := new(NetLinkResponse)
	err := c.cc.Invoke(ctx, "/networker.Networker/AddVeth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkerClient) DelVeth(ctx context.Context, in *VethQuery, opts ...grpc.CallOption) (*NetLinkResponse, error) {
	out := new(NetLinkResponse)
	err := c.cc.Invoke(ctx, "/networker.Networker/DelVeth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkerClient) ShowVlan(ctx context.Context, in *VlanQuery, opts ...grpc.CallOption) (*NetLinkResponse, error) {
	out := new(NetLinkResponse)
	err := c.cc.Invoke(ctx, "/networker.Networker/ShowVlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkerClient) AddVlan(ctx context.Context, in *VlanQuery, opts ...grpc.CallOption) (*NetLinkResponse, error) {
	out := new(NetLinkResponse)
	err := c.cc.Invoke(ctx, "/networker.Networker/AddVlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkerClient) DelVlan(ctx context.Context, in *VlanQuery, opts ...grpc.CallOption) (*NetLinkResponse, error) {
	out := new(NetLinkResponse)
	err := c.cc.Invoke(ctx, "/networker.Networker/DelVlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkerClient) ShowAddr(ctx context.Context, in *AddrQuery, opts ...grpc.CallOption) (*AddrResponse, error) {
	out := new(AddrResponse)
	err := c.cc.Invoke(ctx, "/networker.Networker/ShowAddr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkerClient) AddAddr(ctx context.Context, in *AddrQuery, opts ...grpc.CallOption) (*AddrResponse, error) {
	out := new(AddrResponse)
	err := c.cc.Invoke(ctx, "/networker.Networker/AddAddr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkerClient) DelAddr(ctx context.Context, in *AddrQuery, opts ...grpc.CallOption) (*AddrResponse, error) {
	out := new(AddrResponse)
	err := c.cc.Invoke(ctx, "/networker.Networker/DelAddr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkerClient) ShowRule(ctx context.Context, in *RuleQuery, opts ...grpc.CallOption) (*RuleResponse, error) {
	out := new(RuleResponse)
	err := c.cc.Invoke(ctx, "/networker.Networker/ShowRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkerClient) AddRule(ctx context.Context, in *RuleQuery, opts ...grpc.CallOption) (*RuleResponse, error) {
	out := new(RuleResponse)
	err := c.cc.Invoke(ctx, "/networker.Networker/AddRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkerClient) DelRule(ctx context.Context, in *RuleQuery, opts ...grpc.CallOption) (*RuleResponse, error) {
	out := new(RuleResponse)
	err := c.cc.Invoke(ctx, "/networker.Networker/DelRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkerClient) ShowRoute(ctx context.Context, in *RouteQuery, opts ...grpc.CallOption) (*RouteResponse, error) {
	out := new(RouteResponse)
	err := c.cc.Invoke(ctx, "/networker.Networker/ShowRoute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkerClient) AddRoute(ctx context.Context, in *RouteQuery, opts ...grpc.CallOption) (*RouteResponse, error) {
	out := new(RouteResponse)
	err := c.cc.Invoke(ctx, "/networker.Networker/AddRoute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkerClient) DelRoute(ctx context.Context, in *RouteQuery, opts ...grpc.CallOption) (*RouteResponse, error) {
	out := new(RouteResponse)
	err := c.cc.Invoke(ctx, "/networker.Networker/DelRoute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NetworkerServer is the server API for Networker service.
// All implementations must embed UnimplementedNetworkerServer
// for forward compatibility
type NetworkerServer interface {
	// Link
	ShowNetLink(context.Context, *NetLinkQuery) (*NetLinkResponse, error)
	SetNetLinkMac(context.Context, *NetLinkQuery) (*NetLinkResponse, error)
	SetNetLinkUp(context.Context, *NetLinkQuery) (*NetLinkResponse, error)
	SetNetLinkDown(context.Context, *NetLinkQuery) (*NetLinkResponse, error)
	// Bridge
	ShowBridge(context.Context, *BridgeQuery) (*NetLinkResponse, error)
	ShowBridgeSlave(context.Context, *BridgeQuery) (*NetLinkResponse, error)
	AddBridge(context.Context, *BridgeQuery) (*NetLinkResponse, error)
	DelBridge(context.Context, *BridgeQuery) (*NetLinkResponse, error)
	SetBridgeMaster(context.Context, *BridgeQuery) (*NetLinkResponse, error)
	UnsetBridgeMaster(context.Context, *BridgeQuery) (*NetLinkResponse, error)
	// Veth
	ShowVeth(context.Context, *VethQuery) (*NetLinkResponse, error)
	AddVeth(context.Context, *VethQuery) (*NetLinkResponse, error)
	DelVeth(context.Context, *VethQuery) (*NetLinkResponse, error)
	// Vlan
	ShowVlan(context.Context, *VlanQuery) (*NetLinkResponse, error)
	AddVlan(context.Context, *VlanQuery) (*NetLinkResponse, error)
	DelVlan(context.Context, *VlanQuery) (*NetLinkResponse, error)
	// IP ADDR
	ShowAddr(context.Context, *AddrQuery) (*AddrResponse, error)
	AddAddr(context.Context, *AddrQuery) (*AddrResponse, error)
	DelAddr(context.Context, *AddrQuery) (*AddrResponse, error)
	// IP RULE
	ShowRule(context.Context, *RuleQuery) (*RuleResponse, error)
	AddRule(context.Context, *RuleQuery) (*RuleResponse, error)
	DelRule(context.Context, *RuleQuery) (*RuleResponse, error)
	// IP ROUTE
	ShowRoute(context.Context, *RouteQuery) (*RouteResponse, error)
	AddRoute(context.Context, *RouteQuery) (*RouteResponse, error)
	DelRoute(context.Context, *RouteQuery) (*RouteResponse, error)
	mustEmbedUnimplementedNetworkerServer()
}

// UnimplementedNetworkerServer must be embedded to have forward compatible implementations.
type UnimplementedNetworkerServer struct {
}

func (UnimplementedNetworkerServer) ShowNetLink(context.Context, *NetLinkQuery) (*NetLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowNetLink not implemented")
}
func (UnimplementedNetworkerServer) SetNetLinkMac(context.Context, *NetLinkQuery) (*NetLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetNetLinkMac not implemented")
}
func (UnimplementedNetworkerServer) SetNetLinkUp(context.Context, *NetLinkQuery) (*NetLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetNetLinkUp not implemented")
}
func (UnimplementedNetworkerServer) SetNetLinkDown(context.Context, *NetLinkQuery) (*NetLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetNetLinkDown not implemented")
}
func (UnimplementedNetworkerServer) ShowBridge(context.Context, *BridgeQuery) (*NetLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowBridge not implemented")
}
func (UnimplementedNetworkerServer) ShowBridgeSlave(context.Context, *BridgeQuery) (*NetLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowBridgeSlave not implemented")
}
func (UnimplementedNetworkerServer) AddBridge(context.Context, *BridgeQuery) (*NetLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBridge not implemented")
}
func (UnimplementedNetworkerServer) DelBridge(context.Context, *BridgeQuery) (*NetLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelBridge not implemented")
}
func (UnimplementedNetworkerServer) SetBridgeMaster(context.Context, *BridgeQuery) (*NetLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetBridgeMaster not implemented")
}
func (UnimplementedNetworkerServer) UnsetBridgeMaster(context.Context, *BridgeQuery) (*NetLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnsetBridgeMaster not implemented")
}
func (UnimplementedNetworkerServer) ShowVeth(context.Context, *VethQuery) (*NetLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowVeth not implemented")
}
func (UnimplementedNetworkerServer) AddVeth(context.Context, *VethQuery) (*NetLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddVeth not implemented")
}
func (UnimplementedNetworkerServer) DelVeth(context.Context, *VethQuery) (*NetLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelVeth not implemented")
}
func (UnimplementedNetworkerServer) ShowVlan(context.Context, *VlanQuery) (*NetLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowVlan not implemented")
}
func (UnimplementedNetworkerServer) AddVlan(context.Context, *VlanQuery) (*NetLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddVlan not implemented")
}
func (UnimplementedNetworkerServer) DelVlan(context.Context, *VlanQuery) (*NetLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelVlan not implemented")
}
func (UnimplementedNetworkerServer) ShowAddr(context.Context, *AddrQuery) (*AddrResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowAddr not implemented")
}
func (UnimplementedNetworkerServer) AddAddr(context.Context, *AddrQuery) (*AddrResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAddr not implemented")
}
func (UnimplementedNetworkerServer) DelAddr(context.Context, *AddrQuery) (*AddrResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelAddr not implemented")
}
func (UnimplementedNetworkerServer) ShowRule(context.Context, *RuleQuery) (*RuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowRule not implemented")
}
func (UnimplementedNetworkerServer) AddRule(context.Context, *RuleQuery) (*RuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRule not implemented")
}
func (UnimplementedNetworkerServer) DelRule(context.Context, *RuleQuery) (*RuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelRule not implemented")
}
func (UnimplementedNetworkerServer) ShowRoute(context.Context, *RouteQuery) (*RouteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowRoute not implemented")
}
func (UnimplementedNetworkerServer) AddRoute(context.Context, *RouteQuery) (*RouteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRoute not implemented")
}
func (UnimplementedNetworkerServer) DelRoute(context.Context, *RouteQuery) (*RouteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelRoute not implemented")
}
func (UnimplementedNetworkerServer) mustEmbedUnimplementedNetworkerServer() {}

// UnsafeNetworkerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NetworkerServer will
// result in compilation errors.
type UnsafeNetworkerServer interface {
	mustEmbedUnimplementedNetworkerServer()
}

func RegisterNetworkerServer(s grpc.ServiceRegistrar, srv NetworkerServer) {
	s.RegisterService(&Networker_ServiceDesc, srv)
}

func _Networker_ShowNetLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetLinkQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkerServer).ShowNetLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/networker.Networker/ShowNetLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkerServer).ShowNetLink(ctx, req.(*NetLinkQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Networker_SetNetLinkMac_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetLinkQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkerServer).SetNetLinkMac(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/networker.Networker/SetNetLinkMac",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkerServer).SetNetLinkMac(ctx, req.(*NetLinkQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Networker_SetNetLinkUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetLinkQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkerServer).SetNetLinkUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/networker.Networker/SetNetLinkUp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkerServer).SetNetLinkUp(ctx, req.(*NetLinkQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Networker_SetNetLinkDown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetLinkQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkerServer).SetNetLinkDown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/networker.Networker/SetNetLinkDown",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkerServer).SetNetLinkDown(ctx, req.(*NetLinkQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Networker_ShowBridge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BridgeQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkerServer).ShowBridge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/networker.Networker/ShowBridge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkerServer).ShowBridge(ctx, req.(*BridgeQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Networker_ShowBridgeSlave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BridgeQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkerServer).ShowBridgeSlave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/networker.Networker/ShowBridgeSlave",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkerServer).ShowBridgeSlave(ctx, req.(*BridgeQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Networker_AddBridge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BridgeQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkerServer).AddBridge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/networker.Networker/AddBridge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkerServer).AddBridge(ctx, req.(*BridgeQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Networker_DelBridge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BridgeQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkerServer).DelBridge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/networker.Networker/DelBridge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkerServer).DelBridge(ctx, req.(*BridgeQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Networker_SetBridgeMaster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BridgeQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkerServer).SetBridgeMaster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/networker.Networker/SetBridgeMaster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkerServer).SetBridgeMaster(ctx, req.(*BridgeQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Networker_UnsetBridgeMaster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BridgeQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkerServer).UnsetBridgeMaster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/networker.Networker/UnsetBridgeMaster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkerServer).UnsetBridgeMaster(ctx, req.(*BridgeQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Networker_ShowVeth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VethQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkerServer).ShowVeth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/networker.Networker/ShowVeth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkerServer).ShowVeth(ctx, req.(*VethQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Networker_AddVeth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VethQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkerServer).AddVeth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/networker.Networker/AddVeth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkerServer).AddVeth(ctx, req.(*VethQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Networker_DelVeth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VethQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkerServer).DelVeth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/networker.Networker/DelVeth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkerServer).DelVeth(ctx, req.(*VethQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Networker_ShowVlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VlanQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkerServer).ShowVlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/networker.Networker/ShowVlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkerServer).ShowVlan(ctx, req.(*VlanQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Networker_AddVlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VlanQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkerServer).AddVlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/networker.Networker/AddVlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkerServer).AddVlan(ctx, req.(*VlanQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Networker_DelVlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VlanQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkerServer).DelVlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/networker.Networker/DelVlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkerServer).DelVlan(ctx, req.(*VlanQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Networker_ShowAddr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddrQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkerServer).ShowAddr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/networker.Networker/ShowAddr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkerServer).ShowAddr(ctx, req.(*AddrQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Networker_AddAddr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddrQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkerServer).AddAddr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/networker.Networker/AddAddr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkerServer).AddAddr(ctx, req.(*AddrQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Networker_DelAddr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddrQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkerServer).DelAddr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/networker.Networker/DelAddr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkerServer).DelAddr(ctx, req.(*AddrQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Networker_ShowRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RuleQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkerServer).ShowRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/networker.Networker/ShowRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkerServer).ShowRule(ctx, req.(*RuleQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Networker_AddRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RuleQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkerServer).AddRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/networker.Networker/AddRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkerServer).AddRule(ctx, req.(*RuleQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Networker_DelRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RuleQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkerServer).DelRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/networker.Networker/DelRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkerServer).DelRule(ctx, req.(*RuleQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Networker_ShowRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RouteQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkerServer).ShowRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/networker.Networker/ShowRoute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkerServer).ShowRoute(ctx, req.(*RouteQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Networker_AddRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RouteQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkerServer).AddRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/networker.Networker/AddRoute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkerServer).AddRoute(ctx, req.(*RouteQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Networker_DelRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RouteQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkerServer).DelRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/networker.Networker/DelRoute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkerServer).DelRoute(ctx, req.(*RouteQuery))
	}
	return interceptor(ctx, in, info, handler)
}

// Networker_ServiceDesc is the grpc.ServiceDesc for Networker service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Networker_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "networker.Networker",
	HandlerType: (*NetworkerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ShowNetLink",
			Handler:    _Networker_ShowNetLink_Handler,
		},
		{
			MethodName: "SetNetLinkMac",
			Handler:    _Networker_SetNetLinkMac_Handler,
		},
		{
			MethodName: "SetNetLinkUp",
			Handler:    _Networker_SetNetLinkUp_Handler,
		},
		{
			MethodName: "SetNetLinkDown",
			Handler:    _Networker_SetNetLinkDown_Handler,
		},
		{
			MethodName: "ShowBridge",
			Handler:    _Networker_ShowBridge_Handler,
		},
		{
			MethodName: "ShowBridgeSlave",
			Handler:    _Networker_ShowBridgeSlave_Handler,
		},
		{
			MethodName: "AddBridge",
			Handler:    _Networker_AddBridge_Handler,
		},
		{
			MethodName: "DelBridge",
			Handler:    _Networker_DelBridge_Handler,
		},
		{
			MethodName: "SetBridgeMaster",
			Handler:    _Networker_SetBridgeMaster_Handler,
		},
		{
			MethodName: "UnsetBridgeMaster",
			Handler:    _Networker_UnsetBridgeMaster_Handler,
		},
		{
			MethodName: "ShowVeth",
			Handler:    _Networker_ShowVeth_Handler,
		},
		{
			MethodName: "AddVeth",
			Handler:    _Networker_AddVeth_Handler,
		},
		{
			MethodName: "DelVeth",
			Handler:    _Networker_DelVeth_Handler,
		},
		{
			MethodName: "ShowVlan",
			Handler:    _Networker_ShowVlan_Handler,
		},
		{
			MethodName: "AddVlan",
			Handler:    _Networker_AddVlan_Handler,
		},
		{
			MethodName: "DelVlan",
			Handler:    _Networker_DelVlan_Handler,
		},
		{
			MethodName: "ShowAddr",
			Handler:    _Networker_ShowAddr_Handler,
		},
		{
			MethodName: "AddAddr",
			Handler:    _Networker_AddAddr_Handler,
		},
		{
			MethodName: "DelAddr",
			Handler:    _Networker_DelAddr_Handler,
		},
		{
			MethodName: "ShowRule",
			Handler:    _Networker_ShowRule_Handler,
		},
		{
			MethodName: "AddRule",
			Handler:    _Networker_AddRule_Handler,
		},
		{
			MethodName: "DelRule",
			Handler:    _Networker_DelRule_Handler,
		},
		{
			MethodName: "ShowRoute",
			Handler:    _Networker_ShowRoute_Handler,
		},
		{
			MethodName: "AddRoute",
			Handler:    _Networker_AddRoute_Handler,
		},
		{
			MethodName: "DelRoute",
			Handler:    _Networker_DelRoute_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/libnet/networker/networker.proto",
}
