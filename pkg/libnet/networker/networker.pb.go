// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.12.4
// source: pkg/libnet/networker/networker.proto

package networker

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// LINK
type NetLink struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type         string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Mac          string `protobuf:"bytes,3,opt,name=mac,proto3" json:"mac,omitempty"`
	Status       string `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
	Parent       string `protobuf:"bytes,5,opt,name=parent,proto3" json:"parent,omitempty"`
	Master       string `protobuf:"bytes,6,opt,name=master,proto3" json:"master,omitempty"`
	VlanId       int32  `protobuf:"varint,7,opt,name=vlanId,proto3" json:"vlanId,omitempty"`
	VlanProtocol string `protobuf:"bytes,8,opt,name=vlanProtocol,proto3" json:"vlanProtocol,omitempty"`
}

func (x *NetLink) Reset() {
	*x = NetLink{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_libnet_networker_networker_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetLink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetLink) ProtoMessage() {}

func (x *NetLink) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_libnet_networker_networker_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetLink.ProtoReflect.Descriptor instead.
func (*NetLink) Descriptor() ([]byte, []int) {
	return file_pkg_libnet_networker_networker_proto_rawDescGZIP(), []int{0}
}

func (x *NetLink) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NetLink) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *NetLink) GetMac() string {
	if x != nil {
		return x.Mac
	}
	return ""
}

func (x *NetLink) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *NetLink) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *NetLink) GetMaster() string {
	if x != nil {
		return x.Master
	}
	return ""
}

func (x *NetLink) GetVlanId() int32 {
	if x != nil {
		return x.VlanId
	}
	return 0
}

func (x *NetLink) GetVlanProtocol() string {
	if x != nil {
		return x.VlanProtocol
	}
	return ""
}

type NetLinkQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Mac  string `protobuf:"bytes,2,opt,name=mac,proto3" json:"mac,omitempty"`
}

func (x *NetLinkQuery) Reset() {
	*x = NetLinkQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_libnet_networker_networker_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetLinkQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetLinkQuery) ProtoMessage() {}

func (x *NetLinkQuery) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_libnet_networker_networker_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetLinkQuery.ProtoReflect.Descriptor instead.
func (*NetLinkQuery) Descriptor() ([]byte, []int) {
	return file_pkg_libnet_networker_networker_proto_rawDescGZIP(), []int{1}
}

func (x *NetLinkQuery) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NetLinkQuery) GetMac() string {
	if x != nil {
		return x.Mac
	}
	return ""
}

type BridgeQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	SlaveName string `protobuf:"bytes,2,opt,name=slaveName,proto3" json:"slaveName,omitempty"`
}

func (x *BridgeQuery) Reset() {
	*x = BridgeQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_libnet_networker_networker_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BridgeQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BridgeQuery) ProtoMessage() {}

func (x *BridgeQuery) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_libnet_networker_networker_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BridgeQuery.ProtoReflect.Descriptor instead.
func (*BridgeQuery) Descriptor() ([]byte, []int) {
	return file_pkg_libnet_networker_networker_proto_rawDescGZIP(), []int{2}
}

func (x *BridgeQuery) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BridgeQuery) GetSlaveName() string {
	if x != nil {
		return x.SlaveName
	}
	return ""
}

type VethQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	PeerName string `protobuf:"bytes,2,opt,name=peerName,proto3" json:"peerName,omitempty"`
}

func (x *VethQuery) Reset() {
	*x = VethQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_libnet_networker_networker_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VethQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VethQuery) ProtoMessage() {}

func (x *VethQuery) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_libnet_networker_networker_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VethQuery.ProtoReflect.Descriptor instead.
func (*VethQuery) Descriptor() ([]byte, []int) {
	return file_pkg_libnet_networker_networker_proto_rawDescGZIP(), []int{3}
}

func (x *VethQuery) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VethQuery) GetPeerName() string {
	if x != nil {
		return x.PeerName
	}
	return ""
}

type VlanQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ParentName string `protobuf:"bytes,2,opt,name=parentName,proto3" json:"parentName,omitempty"`
	VlanId     int32  `protobuf:"varint,3,opt,name=vlanId,proto3" json:"vlanId,omitempty"`
}

func (x *VlanQuery) Reset() {
	*x = VlanQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_libnet_networker_networker_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VlanQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VlanQuery) ProtoMessage() {}

func (x *VlanQuery) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_libnet_networker_networker_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VlanQuery.ProtoReflect.Descriptor instead.
func (*VlanQuery) Descriptor() ([]byte, []int) {
	return file_pkg_libnet_networker_networker_proto_rawDescGZIP(), []int{4}
}

func (x *VlanQuery) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VlanQuery) GetParentName() string {
	if x != nil {
		return x.ParentName
	}
	return ""
}

func (x *VlanQuery) GetVlanId() int32 {
	if x != nil {
		return x.VlanId
	}
	return 0
}

type NetLinkResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NetLinks []*NetLink `protobuf:"bytes,1,rep,name=netLinks,proto3" json:"netLinks,omitempty"`
}

func (x *NetLinkResponse) Reset() {
	*x = NetLinkResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_libnet_networker_networker_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetLinkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetLinkResponse) ProtoMessage() {}

func (x *NetLinkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_libnet_networker_networker_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetLinkResponse.ProtoReflect.Descriptor instead.
func (*NetLinkResponse) Descriptor() ([]byte, []int) {
	return file_pkg_libnet_networker_networker_proto_rawDescGZIP(), []int{5}
}

func (x *NetLinkResponse) GetNetLinks() []*NetLink {
	if x != nil {
		return x.NetLinks
	}
	return nil
}

// ADDR
type Addr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"` // bridge name
	IpWithMask string `protobuf:"bytes,2,opt,name=ipWithMask,proto3" json:"ipWithMask,omitempty"`
}

func (x *Addr) Reset() {
	*x = Addr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_libnet_networker_networker_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Addr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Addr) ProtoMessage() {}

func (x *Addr) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_libnet_networker_networker_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Addr.ProtoReflect.Descriptor instead.
func (*Addr) Descriptor() ([]byte, []int) {
	return file_pkg_libnet_networker_networker_proto_rawDescGZIP(), []int{6}
}

func (x *Addr) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Addr) GetIpWithMask() string {
	if x != nil {
		return x.IpWithMask
	}
	return ""
}

type AddrQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	IpWithMask string `protobuf:"bytes,2,opt,name=ipWithMask,proto3" json:"ipWithMask,omitempty"`
}

func (x *AddrQuery) Reset() {
	*x = AddrQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_libnet_networker_networker_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddrQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddrQuery) ProtoMessage() {}

func (x *AddrQuery) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_libnet_networker_networker_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddrQuery.ProtoReflect.Descriptor instead.
func (*AddrQuery) Descriptor() ([]byte, []int) {
	return file_pkg_libnet_networker_networker_proto_rawDescGZIP(), []int{7}
}

func (x *AddrQuery) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AddrQuery) GetIpWithMask() string {
	if x != nil {
		return x.IpWithMask
	}
	return ""
}

type AddrResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addrs []*Addr `protobuf:"bytes,1,rep,name=addrs,proto3" json:"addrs,omitempty"`
}

func (x *AddrResponse) Reset() {
	*x = AddrResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_libnet_networker_networker_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddrResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddrResponse) ProtoMessage() {}

func (x *AddrResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_libnet_networker_networker_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddrResponse.ProtoReflect.Descriptor instead.
func (*AddrResponse) Descriptor() ([]byte, []int) {
	return file_pkg_libnet_networker_networker_proto_rawDescGZIP(), []int{8}
}

func (x *AddrResponse) GetAddrs() []*Addr {
	if x != nil {
		return x.Addrs
	}
	return nil
}

// RULE
type Rule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Priority int32  `protobuf:"varint,1,opt,name=priority,proto3" json:"priority,omitempty"`
	Table    string `protobuf:"bytes,2,opt,name=table,proto3" json:"table,omitempty"`
	Src      string `protobuf:"bytes,3,opt,name=src,proto3" json:"src,omitempty"`
	Dst      string `protobuf:"bytes,4,opt,name=dst,proto3" json:"dst,omitempty"`
	SPort    string `protobuf:"bytes,6,opt,name=sPort,proto3" json:"sPort,omitempty"`
	DPort    string `protobuf:"bytes,5,opt,name=dPort,proto3" json:"dPort,omitempty"`
	IpProto  string `protobuf:"bytes,7,opt,name=ipProto,proto3" json:"ipProto,omitempty"`
	IIfName  string `protobuf:"bytes,8,opt,name=iIfName,proto3" json:"iIfName,omitempty"`
	OIfName  string `protobuf:"bytes,9,opt,name=oIfName,proto3" json:"oIfName,omitempty"`
}

func (x *Rule) Reset() {
	*x = Rule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_libnet_networker_networker_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rule) ProtoMessage() {}

func (x *Rule) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_libnet_networker_networker_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rule.ProtoReflect.Descriptor instead.
func (*Rule) Descriptor() ([]byte, []int) {
	return file_pkg_libnet_networker_networker_proto_rawDescGZIP(), []int{9}
}

func (x *Rule) GetPriority() int32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *Rule) GetTable() string {
	if x != nil {
		return x.Table
	}
	return ""
}

func (x *Rule) GetSrc() string {
	if x != nil {
		return x.Src
	}
	return ""
}

func (x *Rule) GetDst() string {
	if x != nil {
		return x.Dst
	}
	return ""
}

func (x *Rule) GetSPort() string {
	if x != nil {
		return x.SPort
	}
	return ""
}

func (x *Rule) GetDPort() string {
	if x != nil {
		return x.DPort
	}
	return ""
}

func (x *Rule) GetIpProto() string {
	if x != nil {
		return x.IpProto
	}
	return ""
}

func (x *Rule) GetIIfName() string {
	if x != nil {
		return x.IIfName
	}
	return ""
}

func (x *Rule) GetOIfName() string {
	if x != nil {
		return x.OIfName
	}
	return ""
}

type RuleQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Priority int32  `protobuf:"varint,1,opt,name=priority,proto3" json:"priority,omitempty"`
	Table    string `protobuf:"bytes,2,opt,name=table,proto3" json:"table,omitempty"`
	Src      string `protobuf:"bytes,3,opt,name=src,proto3" json:"src,omitempty"`
	Dst      string `protobuf:"bytes,4,opt,name=dst,proto3" json:"dst,omitempty"`
	SPort    string `protobuf:"bytes,6,opt,name=sPort,proto3" json:"sPort,omitempty"`
	DPort    string `protobuf:"bytes,5,opt,name=dPort,proto3" json:"dPort,omitempty"`
	IpProto  string `protobuf:"bytes,7,opt,name=ipProto,proto3" json:"ipProto,omitempty"`
}

func (x *RuleQuery) Reset() {
	*x = RuleQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_libnet_networker_networker_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RuleQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuleQuery) ProtoMessage() {}

func (x *RuleQuery) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_libnet_networker_networker_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuleQuery.ProtoReflect.Descriptor instead.
func (*RuleQuery) Descriptor() ([]byte, []int) {
	return file_pkg_libnet_networker_networker_proto_rawDescGZIP(), []int{10}
}

func (x *RuleQuery) GetPriority() int32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *RuleQuery) GetTable() string {
	if x != nil {
		return x.Table
	}
	return ""
}

func (x *RuleQuery) GetSrc() string {
	if x != nil {
		return x.Src
	}
	return ""
}

func (x *RuleQuery) GetDst() string {
	if x != nil {
		return x.Dst
	}
	return ""
}

func (x *RuleQuery) GetSPort() string {
	if x != nil {
		return x.SPort
	}
	return ""
}

func (x *RuleQuery) GetDPort() string {
	if x != nil {
		return x.DPort
	}
	return ""
}

func (x *RuleQuery) GetIpProto() string {
	if x != nil {
		return x.IpProto
	}
	return ""
}

type RuleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rules []*Rule `protobuf:"bytes,1,rep,name=rules,proto3" json:"rules,omitempty"`
}

func (x *RuleResponse) Reset() {
	*x = RuleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_libnet_networker_networker_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RuleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuleResponse) ProtoMessage() {}

func (x *RuleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_libnet_networker_networker_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuleResponse.ProtoReflect.Descriptor instead.
func (*RuleResponse) Descriptor() ([]byte, []int) {
	return file_pkg_libnet_networker_networker_proto_rawDescGZIP(), []int{11}
}

func (x *RuleResponse) GetRules() []*Rule {
	if x != nil {
		return x.Rules
	}
	return nil
}

// ROUTE
type Route struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Table       string `protobuf:"bytes,1,opt,name=table,proto3" json:"table,omitempty"`
	Protocol    string `protobuf:"bytes,2,opt,name=protocol,proto3" json:"protocol,omitempty"`
	Destination string `protobuf:"bytes,3,opt,name=destination,proto3" json:"destination,omitempty"`
	Source      string `protobuf:"bytes,4,opt,name=source,proto3" json:"source,omitempty"`
	NextHop     string `protobuf:"bytes,5,opt,name=nextHop,proto3" json:"nextHop,omitempty"`
	Device      string `protobuf:"bytes,6,opt,name=device,proto3" json:"device,omitempty"`
}

func (x *Route) Reset() {
	*x = Route{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_libnet_networker_networker_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Route) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Route) ProtoMessage() {}

func (x *Route) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_libnet_networker_networker_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Route.ProtoReflect.Descriptor instead.
func (*Route) Descriptor() ([]byte, []int) {
	return file_pkg_libnet_networker_networker_proto_rawDescGZIP(), []int{12}
}

func (x *Route) GetTable() string {
	if x != nil {
		return x.Table
	}
	return ""
}

func (x *Route) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

func (x *Route) GetDestination() string {
	if x != nil {
		return x.Destination
	}
	return ""
}

func (x *Route) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *Route) GetNextHop() string {
	if x != nil {
		return x.NextHop
	}
	return ""
}

func (x *Route) GetDevice() string {
	if x != nil {
		return x.Device
	}
	return ""
}

type RouteQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Table       string `protobuf:"bytes,1,opt,name=table,proto3" json:"table,omitempty"`
	Protocol    string `protobuf:"bytes,2,opt,name=protocol,proto3" json:"protocol,omitempty"`
	Destination string `protobuf:"bytes,3,opt,name=destination,proto3" json:"destination,omitempty"`
	Source      string `protobuf:"bytes,4,opt,name=source,proto3" json:"source,omitempty"`
	NextHop     string `protobuf:"bytes,5,opt,name=nextHop,proto3" json:"nextHop,omitempty"`
	Device      string `protobuf:"bytes,6,opt,name=device,proto3" json:"device,omitempty"`
}

func (x *RouteQuery) Reset() {
	*x = RouteQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_libnet_networker_networker_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouteQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteQuery) ProtoMessage() {}

func (x *RouteQuery) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_libnet_networker_networker_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteQuery.ProtoReflect.Descriptor instead.
func (*RouteQuery) Descriptor() ([]byte, []int) {
	return file_pkg_libnet_networker_networker_proto_rawDescGZIP(), []int{13}
}

func (x *RouteQuery) GetTable() string {
	if x != nil {
		return x.Table
	}
	return ""
}

func (x *RouteQuery) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

func (x *RouteQuery) GetDestination() string {
	if x != nil {
		return x.Destination
	}
	return ""
}

func (x *RouteQuery) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *RouteQuery) GetNextHop() string {
	if x != nil {
		return x.NextHop
	}
	return ""
}

func (x *RouteQuery) GetDevice() string {
	if x != nil {
		return x.Device
	}
	return ""
}

type RouteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Routes []*Route `protobuf:"bytes,1,rep,name=routes,proto3" json:"routes,omitempty"`
}

func (x *RouteResponse) Reset() {
	*x = RouteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_libnet_networker_networker_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteResponse) ProtoMessage() {}

func (x *RouteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_libnet_networker_networker_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteResponse.ProtoReflect.Descriptor instead.
func (*RouteResponse) Descriptor() ([]byte, []int) {
	return file_pkg_libnet_networker_networker_proto_rawDescGZIP(), []int{14}
}

func (x *RouteResponse) GetRoutes() []*Route {
	if x != nil {
		return x.Routes
	}
	return nil
}

var File_pkg_libnet_networker_networker_proto protoreflect.FileDescriptor

var file_pkg_libnet_networker_networker_proto_rawDesc = []byte{
	0x0a, 0x24, 0x70, 0x6b, 0x67, 0x2f, 0x6c, 0x69, 0x62, 0x6e, 0x65, 0x74, 0x2f, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x65,
	0x72, 0x22, 0xc7, 0x01, 0x0a, 0x07, 0x4e, 0x65, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x63, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6d, 0x61, 0x63, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x12,
	0x16, 0x0a, 0x06, 0x76, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x76, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x76, 0x6c, 0x61, 0x6e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x76,
	0x6c, 0x61, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x22, 0x34, 0x0a, 0x0c, 0x4e,
	0x65, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x6d, 0x61, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x61,
	0x63, 0x22, 0x3f, 0x0a, 0x0b, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x6c, 0x61, 0x76, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x6c, 0x61, 0x76, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0x3b, 0x0a, 0x09, 0x56, 0x65, 0x74, 0x68, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x65, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x65, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22,
	0x57, 0x0a, 0x09, 0x56, 0x6c, 0x61, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x76, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x76, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x22, 0x41, 0x0a, 0x0f, 0x4e, 0x65, 0x74, 0x4c,
	0x69, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x08, 0x6e,
	0x65, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x2e, 0x4e, 0x65, 0x74, 0x4c, 0x69, 0x6e,
	0x6b, 0x52, 0x08, 0x6e, 0x65, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x22, 0x3a, 0x0a, 0x04, 0x41,
	0x64, 0x64, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x70, 0x57, 0x69, 0x74,
	0x68, 0x4d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x70, 0x57,
	0x69, 0x74, 0x68, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0x3f, 0x0a, 0x09, 0x41, 0x64, 0x64, 0x72, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x70, 0x57, 0x69,
	0x74, 0x68, 0x4d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x70,
	0x57, 0x69, 0x74, 0x68, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0x35, 0x0a, 0x0c, 0x41, 0x64, 0x64, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x05, 0x61, 0x64, 0x64, 0x72,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x65, 0x72, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x52, 0x05, 0x61, 0x64, 0x64, 0x72, 0x73, 0x22,
	0xd6, 0x01, 0x0a, 0x04, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x72,
	0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x72, 0x63, 0x12, 0x10, 0x0a, 0x03,
	0x64, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x64, 0x73, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73,
	0x50, 0x6f, 0x72, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x70,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x70, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x49, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x49, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x6f, 0x49, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6f, 0x49, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xa7, 0x01, 0x0a, 0x09, 0x52, 0x75, 0x6c,
	0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x72, 0x63, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x72, 0x63, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x73,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x64, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x50, 0x6f,
	0x72, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x70, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x70, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x35, 0x0a, 0x0c, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x25, 0x0a, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x2e, 0x52, 0x75,
	0x6c, 0x65, 0x52, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x22, 0xa5, 0x01, 0x0a, 0x05, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x6e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x22, 0xaa, 0x01, 0x0a, 0x0a, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x6e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e,
	0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x22, 0x39,
	0x0a, 0x0d, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x28, 0x0a, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x2e, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x52, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x32, 0xf4, 0x0c, 0x0a, 0x09, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x12, 0x44, 0x0a, 0x0b, 0x53, 0x68, 0x6f, 0x77, 0x4e,
	0x65, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x17, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x65, 0x72, 0x2e, 0x4e, 0x65, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a,
	0x1a, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x2e, 0x4e, 0x65, 0x74, 0x4c,
	0x69, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x46, 0x0a,
	0x0d, 0x53, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x4d, 0x61, 0x63, 0x12, 0x17,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x2e, 0x4e, 0x65, 0x74, 0x4c, 0x69,
	0x6e, 0x6b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x1a, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x65, 0x72, 0x2e, 0x4e, 0x65, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x0c, 0x53, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x4c,
	0x69, 0x6e, 0x6b, 0x55, 0x70, 0x12, 0x17, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x65,
	0x72, 0x2e, 0x4e, 0x65, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x1a,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x2e, 0x4e, 0x65, 0x74, 0x4c, 0x69,
	0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x0e,
	0x53, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x44, 0x6f, 0x77, 0x6e, 0x12, 0x17,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x2e, 0x4e, 0x65, 0x74, 0x4c, 0x69,
	0x6e, 0x6b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x1a, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x65, 0x72, 0x2e, 0x4e, 0x65, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x42, 0x0a, 0x0a, 0x53, 0x68, 0x6f, 0x77, 0x42, 0x72, 0x69,
	0x64, 0x67, 0x65, 0x12, 0x16, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x2e,
	0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x1a, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x2e, 0x4e, 0x65, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x0f, 0x53, 0x68, 0x6f,
	0x77, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x53, 0x6c, 0x61, 0x76, 0x65, 0x12, 0x16, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x2e, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x1a, 0x1a, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72,
	0x2e, 0x4e, 0x65, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x41, 0x0a, 0x09, 0x41, 0x64, 0x64, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x12,
	0x16, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x2e, 0x42, 0x72, 0x69, 0x64,
	0x67, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x1a, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x65, 0x72, 0x2e, 0x4e, 0x65, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x09, 0x44, 0x65, 0x6c, 0x42, 0x72, 0x69, 0x64,
	0x67, 0x65, 0x12, 0x16, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x2e, 0x42,
	0x72, 0x69, 0x64, 0x67, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x1a, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x2e, 0x4e, 0x65, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x0f, 0x53, 0x65, 0x74, 0x42,
	0x72, 0x69, 0x64, 0x67, 0x65, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x12, 0x16, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x2e, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x1a, 0x1a, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x2e,
	0x4e, 0x65, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x49, 0x0a, 0x11, 0x55, 0x6e, 0x73, 0x65, 0x74, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65,
	0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x12, 0x16, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x65, 0x72, 0x2e, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x1a,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x2e, 0x4e, 0x65, 0x74, 0x4c, 0x69,
	0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x08,
	0x53, 0x68, 0x6f, 0x77, 0x56, 0x65, 0x74, 0x68, 0x12, 0x14, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x65, 0x72, 0x2e, 0x56, 0x65, 0x74, 0x68, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x1a,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x2e, 0x4e, 0x65, 0x74, 0x4c, 0x69,
	0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x07,
	0x41, 0x64, 0x64, 0x56, 0x65, 0x74, 0x68, 0x12, 0x14, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x65, 0x72, 0x2e, 0x56, 0x65, 0x74, 0x68, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x1a, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x2e, 0x4e, 0x65, 0x74, 0x4c, 0x69, 0x6e,
	0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x07, 0x44,
	0x65, 0x6c, 0x56, 0x65, 0x74, 0x68, 0x12, 0x14, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x65, 0x72, 0x2e, 0x56, 0x65, 0x74, 0x68, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x1a, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x2e, 0x4e, 0x65, 0x74, 0x4c, 0x69, 0x6e, 0x6b,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x08, 0x53, 0x68,
	0x6f, 0x77, 0x56, 0x6c, 0x61, 0x6e, 0x12, 0x14, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x65, 0x72, 0x2e, 0x56, 0x6c, 0x61, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x1a, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x2e, 0x4e, 0x65, 0x74, 0x4c, 0x69, 0x6e, 0x6b,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x07, 0x41, 0x64,
	0x64, 0x56, 0x6c, 0x61, 0x6e, 0x12, 0x14, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x65,
	0x72, 0x2e, 0x56, 0x6c, 0x61, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x1a, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x2e, 0x4e, 0x65, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x07, 0x44, 0x65, 0x6c,
	0x56, 0x6c, 0x61, 0x6e, 0x12, 0x14, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72,
	0x2e, 0x56, 0x6c, 0x61, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x1a, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x2e, 0x4e, 0x65, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3b, 0x0a, 0x08, 0x53, 0x68, 0x6f, 0x77,
	0x41, 0x64, 0x64, 0x72, 0x12, 0x14, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72,
	0x2e, 0x41, 0x64, 0x64, 0x72, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x17, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3a, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x41, 0x64, 0x64, 0x72,
	0x12, 0x14, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x2e, 0x41, 0x64, 0x64,
	0x72, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x17, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x65, 0x72, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x3a, 0x0a, 0x07, 0x44, 0x65, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x12, 0x14, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x1a, 0x17, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x2e, 0x41,
	0x64, 0x64, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3b, 0x0a,
	0x08, 0x53, 0x68, 0x6f, 0x77, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x14, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x65, 0x72, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a,
	0x17, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x2e, 0x52, 0x75, 0x6c, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3a, 0x0a, 0x07, 0x41, 0x64,
	0x64, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x14, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x65,
	0x72, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x17, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3a, 0x0a, 0x07, 0x44, 0x65, 0x6c, 0x52, 0x75, 0x6c,
	0x65, 0x12, 0x14, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x2e, 0x52, 0x75,
	0x6c, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x17, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x65, 0x72, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x3e, 0x0a, 0x09, 0x53, 0x68, 0x6f, 0x77, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x12,
	0x15, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x2e, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x18, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x65, 0x72, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x3d, 0x0a, 0x08, 0x41, 0x64, 0x64, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x15,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x18, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x65,
	0x72, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x3d, 0x0a, 0x08, 0x44, 0x65, 0x6c, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x15, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x1a, 0x18, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72,
	0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x42, 0x16, 0x5a, 0x14, 0x70, 0x6b, 0x67, 0x2f, 0x6c, 0x69, 0x62, 0x6e, 0x65, 0x74, 0x2f, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pkg_libnet_networker_networker_proto_rawDescOnce sync.Once
	file_pkg_libnet_networker_networker_proto_rawDescData = file_pkg_libnet_networker_networker_proto_rawDesc
)

func file_pkg_libnet_networker_networker_proto_rawDescGZIP() []byte {
	file_pkg_libnet_networker_networker_proto_rawDescOnce.Do(func() {
		file_pkg_libnet_networker_networker_proto_rawDescData = protoimpl.X.CompressGZIP(file_pkg_libnet_networker_networker_proto_rawDescData)
	})
	return file_pkg_libnet_networker_networker_proto_rawDescData
}

var file_pkg_libnet_networker_networker_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_pkg_libnet_networker_networker_proto_goTypes = []interface{}{
	(*NetLink)(nil),         // 0: networker.NetLink
	(*NetLinkQuery)(nil),    // 1: networker.NetLinkQuery
	(*BridgeQuery)(nil),     // 2: networker.BridgeQuery
	(*VethQuery)(nil),       // 3: networker.VethQuery
	(*VlanQuery)(nil),       // 4: networker.VlanQuery
	(*NetLinkResponse)(nil), // 5: networker.NetLinkResponse
	(*Addr)(nil),            // 6: networker.Addr
	(*AddrQuery)(nil),       // 7: networker.AddrQuery
	(*AddrResponse)(nil),    // 8: networker.AddrResponse
	(*Rule)(nil),            // 9: networker.Rule
	(*RuleQuery)(nil),       // 10: networker.RuleQuery
	(*RuleResponse)(nil),    // 11: networker.RuleResponse
	(*Route)(nil),           // 12: networker.Route
	(*RouteQuery)(nil),      // 13: networker.RouteQuery
	(*RouteResponse)(nil),   // 14: networker.RouteResponse
}
var file_pkg_libnet_networker_networker_proto_depIdxs = []int32{
	0,  // 0: networker.NetLinkResponse.netLinks:type_name -> networker.NetLink
	6,  // 1: networker.AddrResponse.addrs:type_name -> networker.Addr
	9,  // 2: networker.RuleResponse.rules:type_name -> networker.Rule
	12, // 3: networker.RouteResponse.routes:type_name -> networker.Route
	1,  // 4: networker.Networker.ShowNetLink:input_type -> networker.NetLinkQuery
	1,  // 5: networker.Networker.SetNetLinkMac:input_type -> networker.NetLinkQuery
	1,  // 6: networker.Networker.SetNetLinkUp:input_type -> networker.NetLinkQuery
	1,  // 7: networker.Networker.SetNetLinkDown:input_type -> networker.NetLinkQuery
	2,  // 8: networker.Networker.ShowBridge:input_type -> networker.BridgeQuery
	2,  // 9: networker.Networker.ShowBridgeSlave:input_type -> networker.BridgeQuery
	2,  // 10: networker.Networker.AddBridge:input_type -> networker.BridgeQuery
	2,  // 11: networker.Networker.DelBridge:input_type -> networker.BridgeQuery
	2,  // 12: networker.Networker.SetBridgeMaster:input_type -> networker.BridgeQuery
	2,  // 13: networker.Networker.UnsetBridgeMaster:input_type -> networker.BridgeQuery
	3,  // 14: networker.Networker.ShowVeth:input_type -> networker.VethQuery
	3,  // 15: networker.Networker.AddVeth:input_type -> networker.VethQuery
	3,  // 16: networker.Networker.DelVeth:input_type -> networker.VethQuery
	4,  // 17: networker.Networker.ShowVlan:input_type -> networker.VlanQuery
	4,  // 18: networker.Networker.AddVlan:input_type -> networker.VlanQuery
	4,  // 19: networker.Networker.DelVlan:input_type -> networker.VlanQuery
	7,  // 20: networker.Networker.ShowAddr:input_type -> networker.AddrQuery
	7,  // 21: networker.Networker.AddAddr:input_type -> networker.AddrQuery
	7,  // 22: networker.Networker.DelAddr:input_type -> networker.AddrQuery
	10, // 23: networker.Networker.ShowRule:input_type -> networker.RuleQuery
	10, // 24: networker.Networker.AddRule:input_type -> networker.RuleQuery
	10, // 25: networker.Networker.DelRule:input_type -> networker.RuleQuery
	13, // 26: networker.Networker.ShowRoute:input_type -> networker.RouteQuery
	13, // 27: networker.Networker.AddRoute:input_type -> networker.RouteQuery
	13, // 28: networker.Networker.DelRoute:input_type -> networker.RouteQuery
	5,  // 29: networker.Networker.ShowNetLink:output_type -> networker.NetLinkResponse
	5,  // 30: networker.Networker.SetNetLinkMac:output_type -> networker.NetLinkResponse
	5,  // 31: networker.Networker.SetNetLinkUp:output_type -> networker.NetLinkResponse
	5,  // 32: networker.Networker.SetNetLinkDown:output_type -> networker.NetLinkResponse
	5,  // 33: networker.Networker.ShowBridge:output_type -> networker.NetLinkResponse
	5,  // 34: networker.Networker.ShowBridgeSlave:output_type -> networker.NetLinkResponse
	5,  // 35: networker.Networker.AddBridge:output_type -> networker.NetLinkResponse
	5,  // 36: networker.Networker.DelBridge:output_type -> networker.NetLinkResponse
	5,  // 37: networker.Networker.SetBridgeMaster:output_type -> networker.NetLinkResponse
	5,  // 38: networker.Networker.UnsetBridgeMaster:output_type -> networker.NetLinkResponse
	5,  // 39: networker.Networker.ShowVeth:output_type -> networker.NetLinkResponse
	5,  // 40: networker.Networker.AddVeth:output_type -> networker.NetLinkResponse
	5,  // 41: networker.Networker.DelVeth:output_type -> networker.NetLinkResponse
	5,  // 42: networker.Networker.ShowVlan:output_type -> networker.NetLinkResponse
	5,  // 43: networker.Networker.AddVlan:output_type -> networker.NetLinkResponse
	5,  // 44: networker.Networker.DelVlan:output_type -> networker.NetLinkResponse
	8,  // 45: networker.Networker.ShowAddr:output_type -> networker.AddrResponse
	8,  // 46: networker.Networker.AddAddr:output_type -> networker.AddrResponse
	8,  // 47: networker.Networker.DelAddr:output_type -> networker.AddrResponse
	11, // 48: networker.Networker.ShowRule:output_type -> networker.RuleResponse
	11, // 49: networker.Networker.AddRule:output_type -> networker.RuleResponse
	11, // 50: networker.Networker.DelRule:output_type -> networker.RuleResponse
	14, // 51: networker.Networker.ShowRoute:output_type -> networker.RouteResponse
	14, // 52: networker.Networker.AddRoute:output_type -> networker.RouteResponse
	14, // 53: networker.Networker.DelRoute:output_type -> networker.RouteResponse
	29, // [29:54] is the sub-list for method output_type
	4,  // [4:29] is the sub-list for method input_type
	4,  // [4:4] is the sub-list for extension type_name
	4,  // [4:4] is the sub-list for extension extendee
	0,  // [0:4] is the sub-list for field type_name
}

func init() { file_pkg_libnet_networker_networker_proto_init() }
func file_pkg_libnet_networker_networker_proto_init() {
	if File_pkg_libnet_networker_networker_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pkg_libnet_networker_networker_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetLink); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_libnet_networker_networker_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetLinkQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_libnet_networker_networker_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BridgeQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_libnet_networker_networker_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VethQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_libnet_networker_networker_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VlanQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_libnet_networker_networker_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetLinkResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_libnet_networker_networker_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Addr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_libnet_networker_networker_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddrQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_libnet_networker_networker_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddrResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_libnet_networker_networker_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Rule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_libnet_networker_networker_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RuleQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_libnet_networker_networker_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RuleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_libnet_networker_networker_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Route); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_libnet_networker_networker_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouteQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_libnet_networker_networker_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pkg_libnet_networker_networker_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pkg_libnet_networker_networker_proto_goTypes,
		DependencyIndexes: file_pkg_libnet_networker_networker_proto_depIdxs,
		MessageInfos:      file_pkg_libnet_networker_networker_proto_msgTypes,
	}.Build()
	File_pkg_libnet_networker_networker_proto = out.File
	file_pkg_libnet_networker_networker_proto_rawDesc = nil
	file_pkg_libnet_networker_networker_proto_goTypes = nil
	file_pkg_libnet_networker_networker_proto_depIdxs = nil
}
